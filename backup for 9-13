# -*- coding: utf-8 -*-
# import numpy
#
#
# def print_odd(a):
#     aa = 2
#     list_a =[]
#     while aa <= a:
#         n = 2
#         while n <= numpy.sqrt(aa):
#             if aa % n != 0:
#                 n = n + 1
#             else:
#                 break
#
#         if n > numpy.sqrt(aa):
#             list_a.append(aa)
#  #           print(aa)
#         aa = aa + 1
#
#     return list_a
#
#
# b = 50
# dd = print_odd(b)
# print(dd)


# def is_palindrome(x):
#     y = str(x)
#     n = 0
#     while n <= 0.5 * len(y):
#         if y[n] == y[len(y) - 1 - n]:
#             n = n + 1
#         else:
#             break
#     if n > 0.5 * len(y):
#         m = True
#     else:
#         m = False
#     return m
#
#
# output = filter(is_palindrome, range(1, 1000))
# print('1~1000:', list(output))
# if list(filter(is_palindrome, range(1, 200))) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]:
#     print('测试成功!')
# else:
#     print('测试失败!')


# def is_palindrome(n):
#     return str(n) == str(n)[::-1]
#
#
# output = filter(is_palindrome, range(1, 1000))
# print('1~1000:', list(output))
# if list(filter(is_palindrome, range(1, 200))) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]:
#     print('测试成功!')
# else:
#     print('测试失败!')
#
#
#
#
#
# print(sorted([36, 5, -12, 9, -21]))
# print(sorted([36, 5, -12, 9, -21], key = abs))
# p = sorted(['b', 'a', 'Z', '0', '8', 'H'])
# print(p)
# pp = sorted(['b', 'a', 'Z', '0', '8', 'H'], key=str.lower, reverse=True)
# print(pp)
#
#
# print(sorted([36, 5, -12, 9, -21]))
# print(sorted([36, 5, -12, 9, -21], key = abs))
# p = sorted(['b', 'a', 'Z', '0', '8', 'H'])
# print(p)
# pp = sorted(['b', 'a', 'Z', '0', '8', 'H'], key=str.lower, reverse=True)
# print(pp)
#
# def by_name(t):
#     return t[0]
#
#
# L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]
# # for n in range(len(L)):
# #     print(L[n][0])
#
# p = sorted(L, key=by_name)
# print(p)
# print(by_name(L))
#
#
# def by_name(t):
#     return -t[1]
# -*- coding: utf-8 -*-
#
# def text_save(content, filename, mode='a'):
#     # Try to save a list variable in txt file.
#     file = open(filename, mode)
#     for i in range(len(content)):
#         file.write(str(content[i]))
#     file.close()
#
#
# name_str = 'aaa'
#
# m = 0
#
# IQ = open("a.txt", 'r')
# line_output = ''
# for line in IQ.readlines():
#     if m == 0:
#         line_output = line
#     elif m % 4 == 0 or m % 4 == 1:
#         line_output = line_output + line
#     m = m + 1
# #
# # print(line_output)
# # print(m)
# name_file = str(name_str) + 'b.txt'
# text_save(line_output, name_file)
# IQ.close()
# ' a test module '
#
# __author__ = 'Zhao Yu'

# import sys
#
#
# def test():
#     args = sys.argv
#     if len(args)==1:
#         print('Hello World')
#     elif len(args)==2:
#         print('Hello, %s!' % args[1])
#     else:
#         print('Too many arguments')
#
#
# if __name__=='__main__':
#     test()
#
#
# class FooParent(object):
#     def __init__(self):
#         self.parent = 'I\'m the parent.'
#         print('Parent')
#
#     def bar(self, message):
#         print(message, 'from parent')
#
#
# class FooChild(FooParent):
#     def __init__(self):
#         FooParent.__init__(self)
#         print('Child')
#
#     def bar(self, message):
#         FooParent.bar(self, message)
#         print('Child bar function.')
#         print(self.parent)
#
#
# if __name__ == '__main__':
#     fooChild = FooChild()
#     fooChild.bar('HelloWorld')
# x = 12
#
# if x > 9 and x < 11:
#     print('x=10')
# elif x >= 12 & x <= 14:
#     print('x may be 13')
# aa = 1
# for x in range(11):
#     if x != 0:
#         aa = aa * x
#         print(x)
# print(aa)
import pandas as pd
import numpy as np
# df = pd.DataFrame({'key1': ['a', 'a', 'b', 'b', 'a'], 'key2': ['one', 'two', 'one', 'two', 'one'], 'data1': np.random.randn(5), 'data2': np.random.randn(5)})
# print(df)
#
# grouped = df['data1'].groupby(df['key1'])
# print(grouped.mean())
#
# means = df['data1'].groupby([df['key2'], df['key1']]).mean()
# print(means)
# print(means.unstack())
#
# states = np.array(['Ohio', 'California', 'California', 'Ohio', 'Ohio'])
# years = np.array([2005, 2005, 2006, 2005, 2006])
# means = df['data1'].groupby([states, years]).mean()
# print(means.unstack())
# print(df.groupby('key1').mean())
# print(df.groupby(['key1', 'key2']).size().unstack())
# for name, group in df.groupby('key1'):
#     print(name)
#     print(group)
#
# for (k1, k2), group in df.groupby(['key1', 'key2']):
#     print(k1, k2)
#     print(group)
# pieces = dict(list(df.groupby('key1')))
# for keys, values in pieces.items():
#     print(keys)
#     print(values)
# print(df.dtypes)
# print(df)
# grouped = df.groupby(df.dtypes, axis=1)  # in which axis=0 along the rows (namely, index in pandas), and axis=1 along the columns
# print(list(grouped))
# print(df)
# print(list(df.groupby('key1')[['data1']]))
# print(list(df.groupby('key1')[[]]))
# print('end')
# print(list(df.groupby('key1')['data1'].mean()))
# print(df.groupby(['key1', 'key2'])[['data1']].mean())
# people = pd.DataFrame(np.random.randn(5, 5),
#                       columns=['a', 'b', 'c', 'd', 'e'],
#                       index=['Joe', 'Steve', 'Wes', 'Jim', 'Travis']
#                       )
# print(people)
# people.ix[2:5, ['b', 'c']] = np.nan
# print(people)
# mapping = {'a': 'red', 'b': 'red', 'c': 'blue',
#            'd': 'blue', 'e': 'red', 'f': 'orange'}
# print(type(mapping))

# by_column = people.groupby(mapping, axis=1)
# print(list(by_column))
# print(by_column.sum())
# map_series = pd.Series(mapping)
# print(map_series)
# print(type(map_series))
# print('end')
# print(list(people.groupby(map_series, axis=1)))
# print(people.groupby(map_series, axis=1).count())
# print(people.count())
# print(people.groupby(len).sum())
# key_list = ['one', 'one', 'one', 'two', 'two']
# print(people.groupby([key_list, len]).min())
# columns = pd.MultiIndex.from_arrays([['US', 'US', 'US', 'JP', 'JP'],
#                                     [1, 3, 5, 1, 3]], names=['cty', 'tenor'])
# # print(columns)
# hier_df = pd.DataFrame(np.random.randn(4, 5), columns=columns)
# hier_df.ix[2:3, 2:3] = np.nan
# print(hier_df)
# print(list(hier_df.groupby(level='cty', axis=1)))
# print(hier_df.groupby(level='cty', axis=1).count())
# names1880 = pd.read_csv('names/yob1880.txt', names=['name', 'sex', 'births'])
# print(names1880)
# print(list(names1880.groupby('sex')))
# print(names1880.groupby('sex').births.sum())
years = range(1880, 2011)

pieces = []
columns = ['name', 'sex', 'births']

for year in years:
    path = 'names/yob%d.txt' % year
    frame = pd.read_csv(path, names=columns)

    frame['year'] = year
    pieces.append(frame)

# print(pieces)
names = pd.concat(pieces, ignore_index=True)
# print(names)
#
# total_births = names.pivot_table('births', index='year', columns='sex', aggfunc=sum)
# print(total_births.head())
#
# print(names.head())


def add_prop(group):
    births = group.births.astype(float)
    group['prop'] = births / births.sum()
    return group


names = names.groupby(['year', 'sex']).apply(add_prop)
# names = add_prop(names)
# print(names.births.sum())
# print(list(names.groupby(['year', 'sex'])))
# print(np.allclose(names.prop.sum(), 1))
# print(np.allclose(names.groupby(['year', 'sex']).prop.sum(), 1))
#
#
# def get_top1000(group):
#     return group.sort_index(by='births', ascending=True)[:2]
#
#
# grouped = names.groupby(['year', 'sex'])
# top1000 = grouped.apply(get_top1000)
# print(top1000)
# print(list(grouped))
pieces = []
for year, group in names.groupby(['year', 'sex']):
    pieces.append(group.sort_index(by='births', ascending=False)[:1000])
top1000 = pd.concat(pieces, ignore_index=True)
print(top1000)


boys = top1000[top1000.sex == 'M']
girls = top1000[top1000.sex == 'F']


total_births = top1000.pivot_table('births', index='year', columns='sex', aggfunc=sum)
print(total_births)
subset = total_births[['John', 'Harry', 'Mary', 'Marilyn']]
subset.plot(subplot=True, figsize=(12, 10), grid=False, title='Number of births per year')
